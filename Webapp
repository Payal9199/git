Here's a Terraform configuration that sets up an EC2 instance in a private subnet with a VPC endpoint for EC2 Instance Connect and a Network Load Balancer (NLB) for accessing the web server.


---

Steps in Terraform:

1. VPC & Subnets: Create a VPC with both public and private subnets.


2. Internet Access: Use a NAT Gateway for outbound internet access from private instances.


3. Security Groups: Allow necessary access to EC2.


4. EC2 Instance: Deploy in a private subnet.


5. VPC Endpoint (EC2 Instance Connect): Enables SSH access to private EC2.


6. NLB (Network Load Balancer): Allows web traffic to reach the private instance.




---

Terraform Configuration (main.tf)

provider "aws" {
  region = "us-east-1" # Change region if needed
}

# VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
}

# Public Subnet
resource "aws_subnet" "public_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = "10.0.1.0/24"
  map_public_ip_on_launch = true
}

# Private Subnet
resource "aws_subnet" "private_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = "10.0.2.0/24"
}

# Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.my_vpc.id
}

# Route Table for Public Subnet
resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.my_vpc.id
}

resource "aws_route" "public_internet_access" {
  route_table_id         = aws_route_table.public_rt.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.igw.id
}

resource "aws_route_table_association" "public_assoc" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_rt.id
}

# NAT Gateway (For Private Subnet Outbound Access)
resource "aws_eip" "nat_eip" {}

resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_subnet.id
}

# Route Table for Private Subnet (Using NAT Gateway)
resource "aws_route_table" "private_rt" {
  vpc_id = aws_vpc.my_vpc.id
}

resource "aws_route" "private_nat_access" {
  route_table_id         = aws_route_table.private_rt.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.nat.id
}

resource "aws_route_table_association" "private_assoc" {
  subnet_id      = aws_subnet.private_subnet.id
  route_table_id = aws_route_table.private_rt.id
}

# Security Group for EC2
resource "aws_security_group" "ec2_sg" {
  vpc_id = aws_vpc.my_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]  # Restrict SSH within VPC
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# EC2 Instance (Private)
resource "aws_instance" "web_server" {
  ami           = "ami-0c55b159cbfafe1f0" # Replace with latest AMI
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.private_subnet.id
  security_groups = [aws_security_group.ec2_sg.name]

  user_data = <<-EOF
              #!/bin/bash
              sudo yum update -y
              sudo yum install -y httpd
              echo "Hello from Private Web Server" > /var/www/html/index.html
              sudo systemctl start httpd
              sudo systemctl enable httpd
              EOF

  tags = {
    Name = "PrivateWebServer"
  }
}

# VPC Endpoint for EC2 Instance Connect
resource "aws_vpc_endpoint" "ec2_instance_connect" {
  vpc_id       = aws_vpc.my_vpc.id
  service_name = "com.amazonaws.us-east-1.ec2-instance-connect"
  vpc_endpoint_type = "Interface"
  subnet_ids   = [aws_subnet.private_subnet.id]

  security_group_ids = [aws_security_group.ec2_sg.id]
}

# Network Load Balancer (NLB)
resource "aws_lb" "web_nlb" {
  name               = "web-nlb"
  internal           = false
  load_balancer_type = "network"
  subnets           = [aws_subnet.public_subnet.id]
}

resource "aws_lb_target_group" "web_tg" {
  name     = "web-target-group"
  port     = 80
  protocol = "TCP"
  vpc_id   = aws_vpc.my_vpc.id
}

resource "aws_lb_target_group_attachment" "web_attach" {
  target_group_arn = aws_lb_target_group.web_tg.arn
  target_id        = aws_instance.web_server.id
  port            = 80
}

resource "aws_lb_listener" "web_listener" {
  load_balancer_arn = aws_lb.web_nlb.arn
  port              = 80
  protocol          = "TCP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.web_tg.arn
  }
}

# Output NLB DNS
output "nlb_dns" {
  value = aws_lb.web_nlb.dns_name
}


---

How It Works

1. EC2 instance runs a web server in a private subnet.


2. NAT Gateway allows outbound internet access from the private subnet.


3. EC2 Instance Connect VPC Endpoint allows SSH access via AWS Console.


4. Network Load Balancer (NLB) allows web traffic to reach the private server.



Access the Web Server

Open the NLB DNS (terraform output nlb_dns) in your browser.


Would you like any modifications, such as adding an S3 bucket for hosting instead?

