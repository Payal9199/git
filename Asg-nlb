Hereâ€™s the Terraform configuration with separate files for deploying a web server on a private EC2 instance with a Network Load Balancer (NLB), Auto Scaling, NAT for outbound access, and CloudWatch logging.


---

Folder Structure

terraform/
â”œâ”€â”€ modules/
â”‚   â”œâ”€â”€ vpc/
â”‚   â”‚   â”œâ”€â”€ main.tf
â”‚   â”‚   â”œâ”€â”€ variables.tf
â”‚   â”‚   â”œâ”€â”€ outputs.tf
â”‚   â”œâ”€â”€ ec2/
â”‚   â”‚   â”œâ”€â”€ main.tf
â”‚   â”‚   â”œâ”€â”€ variables.tf
â”‚   â”‚   â”œâ”€â”€ outputs.tf
â”‚   â”œâ”€â”€ nlb/
â”‚   â”‚   â”œâ”€â”€ main.tf
â”‚   â”‚   â”œâ”€â”€ variables.tf
â”‚   â”‚   â”œâ”€â”€ outputs.tf
â”‚   â”œâ”€â”€ asg/
â”‚   â”‚   â”œâ”€â”€ main.tf
â”‚   â”‚   â”œâ”€â”€ variables.tf
â”‚   â”‚   â”œâ”€â”€ outputs.tf
â”‚   â”œâ”€â”€ cloudwatch/
â”‚   â”‚   â”œâ”€â”€ main.tf
â”‚   â”‚   â”œâ”€â”€ variables.tf
â”‚   â”‚   â”œâ”€â”€ outputs.tf
â”œâ”€â”€ main.tf
â”œâ”€â”€ variables.tf
â”œâ”€â”€ outputs.tf


---

1. VPC Module

ðŸ“‚ modules/vpc/main.tf

resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_subnet" "private" {
  count             = 2
  vpc_id           = aws_vpc.main.id
  cidr_block       = "10.0.${count.index + 1}.0/24"
  availability_zone = element(["us-east-1a", "us-east-1b"], count.index)
  map_public_ip_on_launch = false
}

resource "aws_subnet" "public" {
  count             = 2
  vpc_id           = aws_vpc.main.id
  cidr_block       = "10.0.${count.index + 3}.0/24"
  availability_zone = element(["us-east-1a", "us-east-1b"], count.index)
  map_public_ip_on_launch = true
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id
}

resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public[0].id
}

resource "aws_eip" "nat" {
  domain = "vpc"
}

resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id
}

resource "aws_route" "private_nat" {
  route_table_id         = aws_route_table.private.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.nat.id
}

resource "aws_route_table_association" "private" {
  count = 2
  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = aws_route_table.private.id
}

ðŸ“‚ modules/vpc/outputs.tf

output "vpc_id" {
  value = aws_vpc.main.id
}

output "private_subnets" {
  value = aws_subnet.private[*].id
}

output "public_subnets" {
  value = aws_subnet.public[*].id
}


---

2. EC2 Module

ðŸ“‚ modules/ec2/main.tf

resource "aws_launch_template" "web" {
  name_prefix   = "web-server"
  image_id      = "ami-12345678"
  instance_type = "t3.micro"
  vpc_security_group_ids = [var.security_group_id]

  user_data = base64encode(<<-EOF
    #!/bin/bash
    sudo yum install -y httpd
    sudo systemctl start httpd
    sudo systemctl enable httpd
    echo "Welcome to Secure Web Server" > /var/www/html/index.html
  EOF
  )
}

ðŸ“‚ modules/ec2/outputs.tf

output "launch_template_id" {
  value = aws_launch_template.web.id
}


---

3. NLB Module

ðŸ“‚ modules/nlb/main.tf

resource "aws_lb" "nlb" {
  name               = "web-nlb"
  internal           = false
  load_balancer_type = "network"
  subnets            = var.public_subnets
}

resource "aws_lb_target_group" "web" {
  name     = "web-tg"
  port     = 80
  protocol = "TCP"
  vpc_id   = var.vpc_id

  health_check {
    protocol            = "TCP"
    port                = 80
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 10
    interval            = 30
  }
}

resource "aws_lb_listener" "tcp" {
  load_balancer_arn = aws_lb.nlb.arn
  port              = 80
  protocol         = "TCP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.web.arn
  }
}

ðŸ“‚ modules/nlb/outputs.tf

output "nlb_dns_name" {
  value = aws_lb.nlb.dns_name
}

output "web_target_group_arn" {
  value = aws_lb_target_group.web.arn
}


---

4. Auto Scaling Module

ðŸ“‚ modules/asg/main.tf

resource "aws_autoscaling_group" "web" {
  vpc_zone_identifier = var.private_subnets
  desired_capacity    = 2
  max_size           = 4
  min_size           = 2
  target_group_arns  = [var.nlb_target_group_arn]

  launch_template {
    id      = var.launch_template_id
    version = "$Latest"
  }
}

ðŸ“‚ modules/asg/outputs.tf

output "instance_ids" {
  value = aws_autoscaling_group.web.id
}


---

5. CloudWatch Module

ðŸ“‚ modules/cloudwatch/main.tf

resource "aws_cloudwatch_log_group" "web_logs" {
  name = "/var/log/webserver"
}

resource "aws_ssm_document" "cw_agent" {
  name          = "CloudWatchAgent"
  document_type = "Command"
  content       = <<EOT
{
  "schemaVersion": "2.2",
  "description": "Install CloudWatch Agent",
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "installCWAgent",
      "inputs": {
        "runCommand": [
          "sudo yum install -y amazon-cloudwatch-agent",
          "sudo systemctl start amazon-cloudwatch-agent"
        ]
      }
    }
  ]
}
EOT
}

resource "aws_ssm_association" "cw_agent_assoc" {
  name = aws_ssm_document.cw_agent.name
  targets {
    key    = "InstanceIds"
    values = var.instance_ids
  }
}


---

6. Main Configuration

ðŸ“‚ main.tf

module "vpc" {
  source = "./modules/vpc"
}

module "ec2" {
  source            = "./modules/ec2"
  security_group_id = module.vpc.security_group_id
}

module "nlb" {
  source         = "./modules/nlb"
  public_subnets = module.vpc.public_subnets
  vpc_id         = module.vpc.vpc_id
}

module "asg" {
  source              = "./modules/asg"
  launch_template_id  = module.ec2.launch_template_id
  private_subnets     = module.vpc.private_subnets
  nlb_target_group_arn = module.nlb.web_target_group_arn
}

module "cloudwatch" {
  source       = "./modules/cloudwatch"
  instance_ids = module.asg.instance_ids
}


---

This is a modular Terraform setup that secures private EC2 instances, allows outbound access via NAT, scales automatically, and logs to CloudWatch. Let me know if you need any refinements!

